//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Checkers.CheckersServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayMode", Namespace="http://schemas.datacontract.org/2004/07/CheckersAppServer")]
    public enum PlayMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Game = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NetGame = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelfGame = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Collocation = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/CheckersAppServer")]
    public enum Player : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        White = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Black = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CheckersServiceReference.ICheckersService", CallbackContract=typeof(Checkers.CheckersServiceReference.ICheckersServiceCallback))]
    public interface ICheckersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetUserPasswordHash", ReplyAction="http://tempuri.org/ICheckersService/GetUserPasswordHashResponse")]
        string GetUserPasswordHash(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetUserPasswordHash", ReplyAction="http://tempuri.org/ICheckersService/GetUserPasswordHashResponse")]
        System.Threading.Tasks.Task<string> GetUserPasswordHashAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetUserNames", ReplyAction="http://tempuri.org/ICheckersService/GetUserNamesResponse")]
        string[] GetUserNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetUserNames", ReplyAction="http://tempuri.org/ICheckersService/GetUserNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetUserNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetUserProperties", ReplyAction="http://tempuri.org/ICheckersService/GetUserPropertiesResponse")]
        string[] GetUserProperties(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetUserProperties", ReplyAction="http://tempuri.org/ICheckersService/GetUserPropertiesResponse")]
        System.Threading.Tasks.Task<string[]> GetUserPropertiesAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/AddUser", ReplyAction="http://tempuri.org/ICheckersService/AddUserResponse")]
        bool AddUser(string fullname, string position, string sector, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/AddUser", ReplyAction="http://tempuri.org/ICheckersService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string fullname, string position, string sector, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/ChangeUser", ReplyAction="http://tempuri.org/ICheckersService/ChangeUserResponse")]
        bool ChangeUser(string id, string fullname, string position, string sector, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/ChangeUser", ReplyAction="http://tempuri.org/ICheckersService/ChangeUserResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserAsync(string id, string fullname, string position, string sector, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/DeleteUser", ReplyAction="http://tempuri.org/ICheckersService/DeleteUserResponse")]
        bool DeleteUser(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/DeleteUser", ReplyAction="http://tempuri.org/ICheckersService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/CreateGame", ReplyAction="http://tempuri.org/ICheckersService/CreateGameResponse")]
        System.Guid CreateGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/CreateGame", ReplyAction="http://tempuri.org/ICheckersService/CreateGameResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/DestroyGame", ReplyAction="http://tempuri.org/ICheckersService/DestroyGameResponse")]
        bool DestroyGame(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/DestroyGame", ReplyAction="http://tempuri.org/ICheckersService/DestroyGameResponse")]
        System.Threading.Tasks.Task<bool> DestroyGameAsync(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetActiveGames", ReplyAction="http://tempuri.org/ICheckersService/GetActiveGamesResponse")]
        System.Guid[] GetActiveGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetActiveGames", ReplyAction="http://tempuri.org/ICheckersService/GetActiveGamesResponse")]
        System.Threading.Tasks.Task<System.Guid[]> GetActiveGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetGameStatus", ReplyAction="http://tempuri.org/ICheckersService/GetGameStatusResponse")]
        string GetGameStatus(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetGameStatus", ReplyAction="http://tempuri.org/ICheckersService/GetGameStatusResponse")]
        System.Threading.Tasks.Task<string> GetGameStatusAsync(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/StartNewGame", ReplyAction="http://tempuri.org/ICheckersService/StartNewGameResponse")]
        bool StartNewGame(System.Guid gameId, Checkers.CheckersServiceReference.PlayMode gameType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/StartNewGame", ReplyAction="http://tempuri.org/ICheckersService/StartNewGameResponse")]
        System.Threading.Tasks.Task<bool> StartNewGameAsync(System.Guid gameId, Checkers.CheckersServiceReference.PlayMode gameType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/EndGame", ReplyAction="http://tempuri.org/ICheckersService/EndGameResponse")]
        bool EndGame(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/EndGame", ReplyAction="http://tempuri.org/ICheckersService/EndGameResponse")]
        System.Threading.Tasks.Task<bool> EndGameAsync(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetDrawBoardScript", ReplyAction="http://tempuri.org/ICheckersService/GetDrawBoardScriptResponse")]
        string GetDrawBoardScript(System.Guid gameId, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetDrawBoardScript", ReplyAction="http://tempuri.org/ICheckersService/GetDrawBoardScriptResponse")]
        System.Threading.Tasks.Task<string> GetDrawBoardScriptAsync(System.Guid gameId, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/OnBoardMouseDown", ReplyAction="http://tempuri.org/ICheckersService/OnBoardMouseDownResponse")]
        bool OnBoardMouseDown(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/OnBoardMouseDown", ReplyAction="http://tempuri.org/ICheckersService/OnBoardMouseDownResponse")]
        System.Threading.Tasks.Task<bool> OnBoardMouseDownAsync(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/OnBoardMouseMove", ReplyAction="http://tempuri.org/ICheckersService/OnBoardMouseMoveResponse")]
        bool OnBoardMouseMove(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/OnBoardMouseMove", ReplyAction="http://tempuri.org/ICheckersService/OnBoardMouseMoveResponse")]
        System.Threading.Tasks.Task<bool> OnBoardMouseMoveAsync(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/OnBoardMouseUp", ReplyAction="http://tempuri.org/ICheckersService/OnBoardMouseUpResponse")]
        bool OnBoardMouseUp(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/OnBoardMouseUp", ReplyAction="http://tempuri.org/ICheckersService/OnBoardMouseUpResponse")]
        System.Threading.Tasks.Task<bool> OnBoardMouseUpAsync(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/RegisterForUpdates")]
        void RegisterForUpdates(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/RegisterForUpdates")]
        System.Threading.Tasks.Task RegisterForUpdatesAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/UpdateGame")]
        void UpdateGame(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/UpdateGame")]
        System.Threading.Tasks.Task UpdateGameAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/Disconnect")]
        void Disconnect(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetDate", ReplyAction="http://tempuri.org/ICheckersService/GetDateResponse")]
        System.DateTime GetDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckersService/GetDate", ReplyAction="http://tempuri.org/ICheckersService/GetDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetDateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckersServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckersService/GameUpdated")]
        void GameUpdated(System.Guid gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckersServiceChannel : Checkers.CheckersServiceReference.ICheckersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckersServiceClient : System.ServiceModel.DuplexClientBase<Checkers.CheckersServiceReference.ICheckersService>, Checkers.CheckersServiceReference.ICheckersService {
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckersServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetUserPasswordHash(string id) {
            return base.Channel.GetUserPasswordHash(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUserPasswordHashAsync(string id) {
            return base.Channel.GetUserPasswordHashAsync(id);
        }
        
        public string[] GetUserNames() {
            return base.Channel.GetUserNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserNamesAsync() {
            return base.Channel.GetUserNamesAsync();
        }
        
        public string[] GetUserProperties(string id) {
            return base.Channel.GetUserProperties(id);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserPropertiesAsync(string id) {
            return base.Channel.GetUserPropertiesAsync(id);
        }
        
        public bool AddUser(string fullname, string position, string sector, string hash) {
            return base.Channel.AddUser(fullname, position, sector, hash);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string fullname, string position, string sector, string hash) {
            return base.Channel.AddUserAsync(fullname, position, sector, hash);
        }
        
        public bool ChangeUser(string id, string fullname, string position, string sector, string hash) {
            return base.Channel.ChangeUser(id, fullname, position, sector, hash);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserAsync(string id, string fullname, string position, string sector, string hash) {
            return base.Channel.ChangeUserAsync(id, fullname, position, sector, hash);
        }
        
        public bool DeleteUser(string id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public System.Guid CreateGame() {
            return base.Channel.CreateGame();
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateGameAsync() {
            return base.Channel.CreateGameAsync();
        }
        
        public bool DestroyGame(System.Guid gameId) {
            return base.Channel.DestroyGame(gameId);
        }
        
        public System.Threading.Tasks.Task<bool> DestroyGameAsync(System.Guid gameId) {
            return base.Channel.DestroyGameAsync(gameId);
        }
        
        public System.Guid[] GetActiveGames() {
            return base.Channel.GetActiveGames();
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> GetActiveGamesAsync() {
            return base.Channel.GetActiveGamesAsync();
        }
        
        public string GetGameStatus(System.Guid gameId) {
            return base.Channel.GetGameStatus(gameId);
        }
        
        public System.Threading.Tasks.Task<string> GetGameStatusAsync(System.Guid gameId) {
            return base.Channel.GetGameStatusAsync(gameId);
        }
        
        public bool StartNewGame(System.Guid gameId, Checkers.CheckersServiceReference.PlayMode gameType) {
            return base.Channel.StartNewGame(gameId, gameType);
        }
        
        public System.Threading.Tasks.Task<bool> StartNewGameAsync(System.Guid gameId, Checkers.CheckersServiceReference.PlayMode gameType) {
            return base.Channel.StartNewGameAsync(gameId, gameType);
        }
        
        public bool EndGame(System.Guid gameId) {
            return base.Channel.EndGame(gameId);
        }
        
        public System.Threading.Tasks.Task<bool> EndGameAsync(System.Guid gameId) {
            return base.Channel.EndGameAsync(gameId);
        }
        
        public string GetDrawBoardScript(System.Guid gameId, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.GetDrawBoardScript(gameId, player);
        }
        
        public System.Threading.Tasks.Task<string> GetDrawBoardScriptAsync(System.Guid gameId, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.GetDrawBoardScriptAsync(gameId, player);
        }
        
        public bool OnBoardMouseDown(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.OnBoardMouseDown(gameId, location, modifierKeys, player);
        }
        
        public System.Threading.Tasks.Task<bool> OnBoardMouseDownAsync(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.OnBoardMouseDownAsync(gameId, location, modifierKeys, player);
        }
        
        public bool OnBoardMouseMove(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.OnBoardMouseMove(gameId, location, modifierKeys, player);
        }
        
        public System.Threading.Tasks.Task<bool> OnBoardMouseMoveAsync(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.OnBoardMouseMoveAsync(gameId, location, modifierKeys, player);
        }
        
        public bool OnBoardMouseUp(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.OnBoardMouseUp(gameId, location, modifierKeys, player);
        }
        
        public System.Threading.Tasks.Task<bool> OnBoardMouseUpAsync(System.Guid gameId, System.Drawing.Point location, int modifierKeys, Checkers.CheckersServiceReference.Player player) {
            return base.Channel.OnBoardMouseUpAsync(gameId, location, modifierKeys, player);
        }
        
        public void RegisterForUpdates(System.Guid clientId) {
            base.Channel.RegisterForUpdates(clientId);
        }
        
        public System.Threading.Tasks.Task RegisterForUpdatesAsync(System.Guid clientId) {
            return base.Channel.RegisterForUpdatesAsync(clientId);
        }
        
        public void UpdateGame(System.Guid clientId) {
            base.Channel.UpdateGame(clientId);
        }
        
        public System.Threading.Tasks.Task UpdateGameAsync(System.Guid clientId) {
            return base.Channel.UpdateGameAsync(clientId);
        }
        
        public void Disconnect(System.Guid clientId) {
            base.Channel.Disconnect(clientId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid clientId) {
            return base.Channel.DisconnectAsync(clientId);
        }
        
        public System.DateTime GetDate() {
            return base.Channel.GetDate();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetDateAsync() {
            return base.Channel.GetDateAsync();
        }
    }
}
